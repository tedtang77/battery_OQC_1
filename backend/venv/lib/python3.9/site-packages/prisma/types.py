# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# BatteryCell types

class BatteryCellOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the BatteryCell create method"""
    id: _int
    processedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BatteryCellCreateInput(BatteryCellOptionalCreateInput):
    """Required arguments to the BatteryCell create method"""
    serialNumber: _str
    model: _str
    energy: _float
    capacity: _float
    voltage: _float
    imageFile: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BatteryCellOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the BatteryCell create method, without relations"""
    id: _int
    processedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BatteryCellCreateWithoutRelationsInput(BatteryCellOptionalCreateWithoutRelationsInput):
    """Required arguments to the BatteryCell create method, without relations"""
    serialNumber: _str
    model: _str
    energy: _float
    capacity: _float
    voltage: _float
    imageFile: _str

class BatteryCellConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'BatteryCellCreateWithoutRelationsInput'
    where: 'BatteryCellWhereUniqueInput'

class BatteryCellCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'BatteryCellCreateWithoutRelationsInput'
    connect: 'BatteryCellWhereUniqueInput'
    connect_or_create: 'BatteryCellConnectOrCreateWithoutRelationsInput'


class BatteryCellCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['BatteryCellCreateWithoutRelationsInput', List['BatteryCellCreateWithoutRelationsInput']]
    connect: Union['BatteryCellWhereUniqueInput', List['BatteryCellWhereUniqueInput']]
    connect_or_create: Union['BatteryCellConnectOrCreateWithoutRelationsInput', List['BatteryCellConnectOrCreateWithoutRelationsInput']]

_BatteryCellWhereUnique_id_Input = TypedDict(
    '_BatteryCellWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

BatteryCellWhereUniqueInput = _BatteryCellWhereUnique_id_Input


class BatteryCellUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    serialNumber: _str
    model: _str
    energy: Union[AtomicFloatInput, _float]
    capacity: Union[AtomicFloatInput, _float]
    voltage: Union[AtomicFloatInput, _float]
    imageFile: _str
    processedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BatteryCellUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    serialNumber: _str
    model: _str
    energy: Union[AtomicFloatInput, _float]
    capacity: Union[AtomicFloatInput, _float]
    voltage: Union[AtomicFloatInput, _float]
    imageFile: _str
    processedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BatteryCellUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BatteryCellCreateWithoutRelationsInput']
    connect: List['BatteryCellWhereUniqueInput']
    connect_or_create: List['BatteryCellConnectOrCreateWithoutRelationsInput']
    set: List['BatteryCellWhereUniqueInput']
    disconnect: List['BatteryCellWhereUniqueInput']
    delete: List['BatteryCellWhereUniqueInput']

    # TODO
    # update: List['BatteryCellUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BatteryCellUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BatteryCellScalarWhereInput']
    # upsert: List['BatteryCellUpserteWithWhereUniqueWithoutRelationsInput']


class BatteryCellUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BatteryCellCreateWithoutRelationsInput'
    connect: 'BatteryCellWhereUniqueInput'
    connect_or_create: 'BatteryCellConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BatteryCellUpdateInput'
    # upsert: 'BatteryCellUpsertWithoutRelationsInput'


class BatteryCellUpsertInput(TypedDict):
    create: 'BatteryCellCreateInput'
    update: 'BatteryCellUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_BatteryCell_id_OrderByInput = TypedDict(
    '_BatteryCell_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_BatteryCell_serialNumber_OrderByInput = TypedDict(
    '_BatteryCell_serialNumber_OrderByInput',
    {
        'serialNumber': 'SortOrder',
    },
    total=True
)

_BatteryCell_model_OrderByInput = TypedDict(
    '_BatteryCell_model_OrderByInput',
    {
        'model': 'SortOrder',
    },
    total=True
)

_BatteryCell_energy_OrderByInput = TypedDict(
    '_BatteryCell_energy_OrderByInput',
    {
        'energy': 'SortOrder',
    },
    total=True
)

_BatteryCell_capacity_OrderByInput = TypedDict(
    '_BatteryCell_capacity_OrderByInput',
    {
        'capacity': 'SortOrder',
    },
    total=True
)

_BatteryCell_voltage_OrderByInput = TypedDict(
    '_BatteryCell_voltage_OrderByInput',
    {
        'voltage': 'SortOrder',
    },
    total=True
)

_BatteryCell_imageFile_OrderByInput = TypedDict(
    '_BatteryCell_imageFile_OrderByInput',
    {
        'imageFile': 'SortOrder',
    },
    total=True
)

_BatteryCell_processedAt_OrderByInput = TypedDict(
    '_BatteryCell_processedAt_OrderByInput',
    {
        'processedAt': 'SortOrder',
    },
    total=True
)

_BatteryCell_createdAt_OrderByInput = TypedDict(
    '_BatteryCell_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_BatteryCell_updatedAt_OrderByInput = TypedDict(
    '_BatteryCell_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_BatteryCell_RelevanceInner = TypedDict(
    '_BatteryCell_RelevanceInner',
    {
        'fields': 'List[BatteryCellScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_BatteryCell_RelevanceOrderByInput = TypedDict(
    '_BatteryCell_RelevanceOrderByInput',
    {
        '_relevance': '_BatteryCell_RelevanceInner',
    },
    total=True
)

BatteryCellOrderByInput = Union[
    '_BatteryCell_id_OrderByInput',
    '_BatteryCell_serialNumber_OrderByInput',
    '_BatteryCell_model_OrderByInput',
    '_BatteryCell_energy_OrderByInput',
    '_BatteryCell_capacity_OrderByInput',
    '_BatteryCell_voltage_OrderByInput',
    '_BatteryCell_imageFile_OrderByInput',
    '_BatteryCell_processedAt_OrderByInput',
    '_BatteryCell_createdAt_OrderByInput',
    '_BatteryCell_updatedAt_OrderByInput',
    '_BatteryCell_RelevanceOrderByInput',
]



# recursive BatteryCell types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

BatteryCellRelationFilter = TypedDict(
    'BatteryCellRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class BatteryCellListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class BatteryCellInclude(TypedDict, total=False):
    """BatteryCell relational arguments"""


    

class BatteryCellIncludeFromBatteryCell(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatteryCellIncludeFromBatteryCellRecursive1(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatteryCellIncludeFromBatteryCellRecursive2(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatteryCellIncludeFromBatteryCellRecursive3(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatteryCellIncludeFromBatteryCellRecursive4(TypedDict, total=False):
    """Relational arguments for BatteryCell"""

    

class BatteryCellArgsFromBatteryCell(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive1'


class BatteryCellArgsFromBatteryCellRecursive1(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive2'


class BatteryCellArgsFromBatteryCellRecursive2(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive3'


class BatteryCellArgsFromBatteryCellRecursive3(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive4'


class BatteryCellArgsFromBatteryCellRecursive4(TypedDict, total=False):
    """Arguments for BatteryCell"""
    
    

class FindManyBatteryCellArgsFromBatteryCell(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive1'


class FindManyBatteryCellArgsFromBatteryCellRecursive1(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive2'


class FindManyBatteryCellArgsFromBatteryCellRecursive2(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive3'


class FindManyBatteryCellArgsFromBatteryCellRecursive3(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive4'


class FindManyBatteryCellArgsFromBatteryCellRecursive4(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    
    

class BatchProcessIncludeFromBatteryCell(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatchProcessIncludeFromBatteryCellRecursive1(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatchProcessIncludeFromBatteryCellRecursive2(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatchProcessIncludeFromBatteryCellRecursive3(TypedDict, total=False):
    """Relational arguments for BatteryCell"""


class BatchProcessIncludeFromBatteryCellRecursive4(TypedDict, total=False):
    """Relational arguments for BatteryCell"""

    

class BatchProcessArgsFromBatteryCell(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive1'


class BatchProcessArgsFromBatteryCellRecursive1(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive2'


class BatchProcessArgsFromBatteryCellRecursive2(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive3'


class BatchProcessArgsFromBatteryCellRecursive3(TypedDict, total=False):
    """Arguments for BatteryCell"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive4'


class BatchProcessArgsFromBatteryCellRecursive4(TypedDict, total=False):
    """Arguments for BatteryCell"""
    
    

class FindManyBatchProcessArgsFromBatteryCell(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive1'


class FindManyBatchProcessArgsFromBatteryCellRecursive1(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive2'


class FindManyBatchProcessArgsFromBatteryCellRecursive2(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive3'


class FindManyBatchProcessArgsFromBatteryCellRecursive3(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive4'


class FindManyBatchProcessArgsFromBatteryCellRecursive4(TypedDict, total=False):
    """Arguments for BatteryCell"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    


FindManyBatteryCellArgs = FindManyBatteryCellArgsFromBatteryCell
FindFirstBatteryCellArgs = FindManyBatteryCellArgsFromBatteryCell


    

class BatteryCellWhereInput(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    serialNumber: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    energy: Union[_float, 'types.FloatFilter']
    capacity: Union[_float, 'types.FloatFilter']
    voltage: Union[_float, 'types.FloatFilter']
    imageFile: Union[_str, 'types.StringFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatteryCellWhereInputRecursive1', List['BatteryCellWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['BatteryCellWhereInputRecursive1']
    OR: List['BatteryCellWhereInputRecursive1']
    NOT: List['BatteryCellWhereInputRecursive1']


class BatteryCellWhereInputRecursive1(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    serialNumber: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    energy: Union[_float, 'types.FloatFilter']
    capacity: Union[_float, 'types.FloatFilter']
    voltage: Union[_float, 'types.FloatFilter']
    imageFile: Union[_str, 'types.StringFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatteryCellWhereInputRecursive2', List['BatteryCellWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['BatteryCellWhereInputRecursive2']
    OR: List['BatteryCellWhereInputRecursive2']
    NOT: List['BatteryCellWhereInputRecursive2']


class BatteryCellWhereInputRecursive2(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    serialNumber: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    energy: Union[_float, 'types.FloatFilter']
    capacity: Union[_float, 'types.FloatFilter']
    voltage: Union[_float, 'types.FloatFilter']
    imageFile: Union[_str, 'types.StringFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatteryCellWhereInputRecursive3', List['BatteryCellWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['BatteryCellWhereInputRecursive3']
    OR: List['BatteryCellWhereInputRecursive3']
    NOT: List['BatteryCellWhereInputRecursive3']


class BatteryCellWhereInputRecursive3(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    serialNumber: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    energy: Union[_float, 'types.FloatFilter']
    capacity: Union[_float, 'types.FloatFilter']
    voltage: Union[_float, 'types.FloatFilter']
    imageFile: Union[_str, 'types.StringFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatteryCellWhereInputRecursive4', List['BatteryCellWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['BatteryCellWhereInputRecursive4']
    OR: List['BatteryCellWhereInputRecursive4']
    NOT: List['BatteryCellWhereInputRecursive4']


class BatteryCellWhereInputRecursive4(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    serialNumber: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    energy: Union[_float, 'types.FloatFilter']
    capacity: Union[_float, 'types.FloatFilter']
    voltage: Union[_float, 'types.FloatFilter']
    imageFile: Union[_str, 'types.StringFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate BatteryCell types


    

class BatteryCellScalarWhereWithAggregatesInput(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    serialNumber: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    energy: Union[_float, 'types.FloatWithAggregatesFilter']
    capacity: Union[_float, 'types.FloatWithAggregatesFilter']
    voltage: Union[_float, 'types.FloatWithAggregatesFilter']
    imageFile: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatteryCellScalarWhereWithAggregatesInputRecursive1']
    OR: List['BatteryCellScalarWhereWithAggregatesInputRecursive1']
    NOT: List['BatteryCellScalarWhereWithAggregatesInputRecursive1']


class BatteryCellScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    serialNumber: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    energy: Union[_float, 'types.FloatWithAggregatesFilter']
    capacity: Union[_float, 'types.FloatWithAggregatesFilter']
    voltage: Union[_float, 'types.FloatWithAggregatesFilter']
    imageFile: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatteryCellScalarWhereWithAggregatesInputRecursive2']
    OR: List['BatteryCellScalarWhereWithAggregatesInputRecursive2']
    NOT: List['BatteryCellScalarWhereWithAggregatesInputRecursive2']


class BatteryCellScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    serialNumber: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    energy: Union[_float, 'types.FloatWithAggregatesFilter']
    capacity: Union[_float, 'types.FloatWithAggregatesFilter']
    voltage: Union[_float, 'types.FloatWithAggregatesFilter']
    imageFile: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatteryCellScalarWhereWithAggregatesInputRecursive3']
    OR: List['BatteryCellScalarWhereWithAggregatesInputRecursive3']
    NOT: List['BatteryCellScalarWhereWithAggregatesInputRecursive3']


class BatteryCellScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    serialNumber: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    energy: Union[_float, 'types.FloatWithAggregatesFilter']
    capacity: Union[_float, 'types.FloatWithAggregatesFilter']
    voltage: Union[_float, 'types.FloatWithAggregatesFilter']
    imageFile: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatteryCellScalarWhereWithAggregatesInputRecursive4']
    OR: List['BatteryCellScalarWhereWithAggregatesInputRecursive4']
    NOT: List['BatteryCellScalarWhereWithAggregatesInputRecursive4']


class BatteryCellScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """BatteryCell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    serialNumber: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    energy: Union[_float, 'types.FloatWithAggregatesFilter']
    capacity: Union[_float, 'types.FloatWithAggregatesFilter']
    voltage: Union[_float, 'types.FloatWithAggregatesFilter']
    imageFile: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class BatteryCellGroupByOutput(TypedDict, total=False):
    id: _int
    serialNumber: _str
    model: _str
    energy: _float
    capacity: _float
    voltage: _float
    imageFile: _str
    processedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'BatteryCellSumAggregateOutput'
    _avg: 'BatteryCellAvgAggregateOutput'
    _min: 'BatteryCellMinAggregateOutput'
    _max: 'BatteryCellMaxAggregateOutput'
    _count: 'BatteryCellCountAggregateOutput'


class BatteryCellAvgAggregateOutput(TypedDict, total=False):
    """BatteryCell output for aggregating averages"""
    id: float
    energy: float
    capacity: float
    voltage: float


class BatteryCellSumAggregateOutput(TypedDict, total=False):
    """BatteryCell output for aggregating sums"""
    id: _int
    energy: _float
    capacity: _float
    voltage: _float


class BatteryCellScalarAggregateOutput(TypedDict, total=False):
    """BatteryCell output including scalar fields"""
    id: _int
    serialNumber: _str
    model: _str
    energy: _float
    capacity: _float
    voltage: _float
    imageFile: _str
    processedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


BatteryCellMinAggregateOutput = BatteryCellScalarAggregateOutput
BatteryCellMaxAggregateOutput = BatteryCellScalarAggregateOutput


class BatteryCellMaxAggregateInput(TypedDict, total=False):
    """BatteryCell input for aggregating by max"""
    id: bool
    serialNumber: bool
    model: bool
    energy: bool
    capacity: bool
    voltage: bool
    imageFile: bool
    processedAt: bool
    createdAt: bool
    updatedAt: bool


class BatteryCellMinAggregateInput(TypedDict, total=False):
    """BatteryCell input for aggregating by min"""
    id: bool
    serialNumber: bool
    model: bool
    energy: bool
    capacity: bool
    voltage: bool
    imageFile: bool
    processedAt: bool
    createdAt: bool
    updatedAt: bool


class BatteryCellNumberAggregateInput(TypedDict, total=False):
    """BatteryCell input for aggregating numbers"""
    id: bool
    energy: bool
    capacity: bool
    voltage: bool


BatteryCellAvgAggregateInput = BatteryCellNumberAggregateInput
BatteryCellSumAggregateInput = BatteryCellNumberAggregateInput


BatteryCellCountAggregateInput = TypedDict(
    'BatteryCellCountAggregateInput',
    {
        'id': bool,
        'serialNumber': bool,
        'model': bool,
        'energy': bool,
        'capacity': bool,
        'voltage': bool,
        'imageFile': bool,
        'processedAt': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

BatteryCellCountAggregateOutput = TypedDict(
    'BatteryCellCountAggregateOutput',
    {
        'id': int,
        'serialNumber': int,
        'model': int,
        'energy': int,
        'capacity': int,
        'voltage': int,
        'imageFile': int,
        'processedAt': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


BatteryCellKeys = Literal[
    'id',
    'serialNumber',
    'model',
    'energy',
    'capacity',
    'voltage',
    'imageFile',
    'processedAt',
    'createdAt',
    'updatedAt',
]
BatteryCellScalarFieldKeys = Literal[
    'id',
    'serialNumber',
    'model',
    'energy',
    'capacity',
    'voltage',
    'imageFile',
    'processedAt',
    'createdAt',
    'updatedAt',
]
BatteryCellScalarFieldKeysT = TypeVar('BatteryCellScalarFieldKeysT', bound=BatteryCellScalarFieldKeys)

BatteryCellRelationalFieldKeys = _NoneType

# BatchProcess types

class BatchProcessOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the BatchProcess create method"""
    id: _int
    processedAt: datetime.datetime
    createdAt: datetime.datetime


class BatchProcessCreateInput(BatchProcessOptionalCreateInput):
    """Required arguments to the BatchProcess create method"""
    batchName: _str
    totalCells: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BatchProcessOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the BatchProcess create method, without relations"""
    id: _int
    processedAt: datetime.datetime
    createdAt: datetime.datetime


class BatchProcessCreateWithoutRelationsInput(BatchProcessOptionalCreateWithoutRelationsInput):
    """Required arguments to the BatchProcess create method, without relations"""
    batchName: _str
    totalCells: _int

class BatchProcessConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'BatchProcessCreateWithoutRelationsInput'
    where: 'BatchProcessWhereUniqueInput'

class BatchProcessCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'BatchProcessCreateWithoutRelationsInput'
    connect: 'BatchProcessWhereUniqueInput'
    connect_or_create: 'BatchProcessConnectOrCreateWithoutRelationsInput'


class BatchProcessCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['BatchProcessCreateWithoutRelationsInput', List['BatchProcessCreateWithoutRelationsInput']]
    connect: Union['BatchProcessWhereUniqueInput', List['BatchProcessWhereUniqueInput']]
    connect_or_create: Union['BatchProcessConnectOrCreateWithoutRelationsInput', List['BatchProcessConnectOrCreateWithoutRelationsInput']]

_BatchProcessWhereUnique_id_Input = TypedDict(
    '_BatchProcessWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

BatchProcessWhereUniqueInput = _BatchProcessWhereUnique_id_Input


class BatchProcessUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    batchName: _str
    totalCells: Union[AtomicIntInput, _int]
    processedAt: datetime.datetime
    createdAt: datetime.datetime


class BatchProcessUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    batchName: _str
    totalCells: Union[AtomicIntInput, _int]
    processedAt: datetime.datetime
    createdAt: datetime.datetime


class BatchProcessUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BatchProcessCreateWithoutRelationsInput']
    connect: List['BatchProcessWhereUniqueInput']
    connect_or_create: List['BatchProcessConnectOrCreateWithoutRelationsInput']
    set: List['BatchProcessWhereUniqueInput']
    disconnect: List['BatchProcessWhereUniqueInput']
    delete: List['BatchProcessWhereUniqueInput']

    # TODO
    # update: List['BatchProcessUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BatchProcessUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BatchProcessScalarWhereInput']
    # upsert: List['BatchProcessUpserteWithWhereUniqueWithoutRelationsInput']


class BatchProcessUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BatchProcessCreateWithoutRelationsInput'
    connect: 'BatchProcessWhereUniqueInput'
    connect_or_create: 'BatchProcessConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BatchProcessUpdateInput'
    # upsert: 'BatchProcessUpsertWithoutRelationsInput'


class BatchProcessUpsertInput(TypedDict):
    create: 'BatchProcessCreateInput'
    update: 'BatchProcessUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_BatchProcess_id_OrderByInput = TypedDict(
    '_BatchProcess_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_BatchProcess_batchName_OrderByInput = TypedDict(
    '_BatchProcess_batchName_OrderByInput',
    {
        'batchName': 'SortOrder',
    },
    total=True
)

_BatchProcess_totalCells_OrderByInput = TypedDict(
    '_BatchProcess_totalCells_OrderByInput',
    {
        'totalCells': 'SortOrder',
    },
    total=True
)

_BatchProcess_processedAt_OrderByInput = TypedDict(
    '_BatchProcess_processedAt_OrderByInput',
    {
        'processedAt': 'SortOrder',
    },
    total=True
)

_BatchProcess_createdAt_OrderByInput = TypedDict(
    '_BatchProcess_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_BatchProcess_RelevanceInner = TypedDict(
    '_BatchProcess_RelevanceInner',
    {
        'fields': 'List[BatchProcessScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_BatchProcess_RelevanceOrderByInput = TypedDict(
    '_BatchProcess_RelevanceOrderByInput',
    {
        '_relevance': '_BatchProcess_RelevanceInner',
    },
    total=True
)

BatchProcessOrderByInput = Union[
    '_BatchProcess_id_OrderByInput',
    '_BatchProcess_batchName_OrderByInput',
    '_BatchProcess_totalCells_OrderByInput',
    '_BatchProcess_processedAt_OrderByInput',
    '_BatchProcess_createdAt_OrderByInput',
    '_BatchProcess_RelevanceOrderByInput',
]



# recursive BatchProcess types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

BatchProcessRelationFilter = TypedDict(
    'BatchProcessRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class BatchProcessListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class BatchProcessInclude(TypedDict, total=False):
    """BatchProcess relational arguments"""


    

class BatteryCellIncludeFromBatchProcess(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatteryCellIncludeFromBatchProcessRecursive1(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatteryCellIncludeFromBatchProcessRecursive2(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatteryCellIncludeFromBatchProcessRecursive3(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatteryCellIncludeFromBatchProcessRecursive4(TypedDict, total=False):
    """Relational arguments for BatchProcess"""

    

class BatteryCellArgsFromBatchProcess(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive1'


class BatteryCellArgsFromBatchProcessRecursive1(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive2'


class BatteryCellArgsFromBatchProcessRecursive2(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive3'


class BatteryCellArgsFromBatchProcessRecursive3(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatteryCellIncludeFromBatteryCellRecursive4'


class BatteryCellArgsFromBatchProcessRecursive4(TypedDict, total=False):
    """Arguments for BatchProcess"""
    
    

class FindManyBatteryCellArgsFromBatchProcess(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive1'


class FindManyBatteryCellArgsFromBatchProcessRecursive1(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive2'


class FindManyBatteryCellArgsFromBatchProcessRecursive2(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive3'


class FindManyBatteryCellArgsFromBatchProcessRecursive3(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    include: 'BatteryCellIncludeFromBatteryCellRecursive4'


class FindManyBatteryCellArgsFromBatchProcessRecursive4(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatteryCellOrderByInput', List['BatteryCellOrderByInput']]
    where: 'BatteryCellWhereInput'
    cursor: 'BatteryCellWhereUniqueInput'
    distinct: List['BatteryCellScalarFieldKeys']
    
    

class BatchProcessIncludeFromBatchProcess(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatchProcessIncludeFromBatchProcessRecursive1(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatchProcessIncludeFromBatchProcessRecursive2(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatchProcessIncludeFromBatchProcessRecursive3(TypedDict, total=False):
    """Relational arguments for BatchProcess"""


class BatchProcessIncludeFromBatchProcessRecursive4(TypedDict, total=False):
    """Relational arguments for BatchProcess"""

    

class BatchProcessArgsFromBatchProcess(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive1'


class BatchProcessArgsFromBatchProcessRecursive1(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive2'


class BatchProcessArgsFromBatchProcessRecursive2(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive3'


class BatchProcessArgsFromBatchProcessRecursive3(TypedDict, total=False):
    """Arguments for BatchProcess"""
    include: 'BatchProcessIncludeFromBatchProcessRecursive4'


class BatchProcessArgsFromBatchProcessRecursive4(TypedDict, total=False):
    """Arguments for BatchProcess"""
    
    

class FindManyBatchProcessArgsFromBatchProcess(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive1'


class FindManyBatchProcessArgsFromBatchProcessRecursive1(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive2'


class FindManyBatchProcessArgsFromBatchProcessRecursive2(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive3'


class FindManyBatchProcessArgsFromBatchProcessRecursive3(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    include: 'BatchProcessIncludeFromBatchProcessRecursive4'


class FindManyBatchProcessArgsFromBatchProcessRecursive4(TypedDict, total=False):
    """Arguments for BatchProcess"""
    take: int
    skip: int
    order_by: Union['BatchProcessOrderByInput', List['BatchProcessOrderByInput']]
    where: 'BatchProcessWhereInput'
    cursor: 'BatchProcessWhereUniqueInput'
    distinct: List['BatchProcessScalarFieldKeys']
    


FindManyBatchProcessArgs = FindManyBatchProcessArgsFromBatchProcess
FindFirstBatchProcessArgs = FindManyBatchProcessArgsFromBatchProcess


    

class BatchProcessWhereInput(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    batchName: Union[_str, 'types.StringFilter']
    totalCells: Union[_int, 'types.IntFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatchProcessWhereInputRecursive1', List['BatchProcessWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['BatchProcessWhereInputRecursive1']
    OR: List['BatchProcessWhereInputRecursive1']
    NOT: List['BatchProcessWhereInputRecursive1']


class BatchProcessWhereInputRecursive1(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    batchName: Union[_str, 'types.StringFilter']
    totalCells: Union[_int, 'types.IntFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatchProcessWhereInputRecursive2', List['BatchProcessWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['BatchProcessWhereInputRecursive2']
    OR: List['BatchProcessWhereInputRecursive2']
    NOT: List['BatchProcessWhereInputRecursive2']


class BatchProcessWhereInputRecursive2(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    batchName: Union[_str, 'types.StringFilter']
    totalCells: Union[_int, 'types.IntFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatchProcessWhereInputRecursive3', List['BatchProcessWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['BatchProcessWhereInputRecursive3']
    OR: List['BatchProcessWhereInputRecursive3']
    NOT: List['BatchProcessWhereInputRecursive3']


class BatchProcessWhereInputRecursive3(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    batchName: Union[_str, 'types.StringFilter']
    totalCells: Union[_int, 'types.IntFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BatchProcessWhereInputRecursive4', List['BatchProcessWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['BatchProcessWhereInputRecursive4']
    OR: List['BatchProcessWhereInputRecursive4']
    NOT: List['BatchProcessWhereInputRecursive4']


class BatchProcessWhereInputRecursive4(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    batchName: Union[_str, 'types.StringFilter']
    totalCells: Union[_int, 'types.IntFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate BatchProcess types


    

class BatchProcessScalarWhereWithAggregatesInput(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    batchName: Union[_str, 'types.StringWithAggregatesFilter']
    totalCells: Union[_int, 'types.IntWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatchProcessScalarWhereWithAggregatesInputRecursive1']
    OR: List['BatchProcessScalarWhereWithAggregatesInputRecursive1']
    NOT: List['BatchProcessScalarWhereWithAggregatesInputRecursive1']


class BatchProcessScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    batchName: Union[_str, 'types.StringWithAggregatesFilter']
    totalCells: Union[_int, 'types.IntWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatchProcessScalarWhereWithAggregatesInputRecursive2']
    OR: List['BatchProcessScalarWhereWithAggregatesInputRecursive2']
    NOT: List['BatchProcessScalarWhereWithAggregatesInputRecursive2']


class BatchProcessScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    batchName: Union[_str, 'types.StringWithAggregatesFilter']
    totalCells: Union[_int, 'types.IntWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatchProcessScalarWhereWithAggregatesInputRecursive3']
    OR: List['BatchProcessScalarWhereWithAggregatesInputRecursive3']
    NOT: List['BatchProcessScalarWhereWithAggregatesInputRecursive3']


class BatchProcessScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    batchName: Union[_str, 'types.StringWithAggregatesFilter']
    totalCells: Union[_int, 'types.IntWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BatchProcessScalarWhereWithAggregatesInputRecursive4']
    OR: List['BatchProcessScalarWhereWithAggregatesInputRecursive4']
    NOT: List['BatchProcessScalarWhereWithAggregatesInputRecursive4']


class BatchProcessScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """BatchProcess arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    batchName: Union[_str, 'types.StringWithAggregatesFilter']
    totalCells: Union[_int, 'types.IntWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class BatchProcessGroupByOutput(TypedDict, total=False):
    id: _int
    batchName: _str
    totalCells: _int
    processedAt: datetime.datetime
    createdAt: datetime.datetime
    _sum: 'BatchProcessSumAggregateOutput'
    _avg: 'BatchProcessAvgAggregateOutput'
    _min: 'BatchProcessMinAggregateOutput'
    _max: 'BatchProcessMaxAggregateOutput'
    _count: 'BatchProcessCountAggregateOutput'


class BatchProcessAvgAggregateOutput(TypedDict, total=False):
    """BatchProcess output for aggregating averages"""
    id: float
    totalCells: float


class BatchProcessSumAggregateOutput(TypedDict, total=False):
    """BatchProcess output for aggregating sums"""
    id: _int
    totalCells: _int


class BatchProcessScalarAggregateOutput(TypedDict, total=False):
    """BatchProcess output including scalar fields"""
    id: _int
    batchName: _str
    totalCells: _int
    processedAt: datetime.datetime
    createdAt: datetime.datetime


BatchProcessMinAggregateOutput = BatchProcessScalarAggregateOutput
BatchProcessMaxAggregateOutput = BatchProcessScalarAggregateOutput


class BatchProcessMaxAggregateInput(TypedDict, total=False):
    """BatchProcess input for aggregating by max"""
    id: bool
    batchName: bool
    totalCells: bool
    processedAt: bool
    createdAt: bool


class BatchProcessMinAggregateInput(TypedDict, total=False):
    """BatchProcess input for aggregating by min"""
    id: bool
    batchName: bool
    totalCells: bool
    processedAt: bool
    createdAt: bool


class BatchProcessNumberAggregateInput(TypedDict, total=False):
    """BatchProcess input for aggregating numbers"""
    id: bool
    totalCells: bool


BatchProcessAvgAggregateInput = BatchProcessNumberAggregateInput
BatchProcessSumAggregateInput = BatchProcessNumberAggregateInput


BatchProcessCountAggregateInput = TypedDict(
    'BatchProcessCountAggregateInput',
    {
        'id': bool,
        'batchName': bool,
        'totalCells': bool,
        'processedAt': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

BatchProcessCountAggregateOutput = TypedDict(
    'BatchProcessCountAggregateOutput',
    {
        'id': int,
        'batchName': int,
        'totalCells': int,
        'processedAt': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


BatchProcessKeys = Literal[
    'id',
    'batchName',
    'totalCells',
    'processedAt',
    'createdAt',
]
BatchProcessScalarFieldKeys = Literal[
    'id',
    'batchName',
    'totalCells',
    'processedAt',
    'createdAt',
]
BatchProcessScalarFieldKeysT = TypeVar('BatchProcessScalarFieldKeysT', bound=BatchProcessScalarFieldKeys)

BatchProcessRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields